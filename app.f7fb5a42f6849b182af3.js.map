{"version":3,"sources":["webpack:///./app/components/TodoItem/style.css?4c11","webpack:///./app/components/Footer/style.css?30f7","webpack:///./app/components/TodoTextInput/style.css?71e8","webpack:///./app/components/TodoList/style.css?14c4","webpack:///./app/index.tsx","webpack:///./app/containers/App/style.css","webpack:///./app/models/TodoModel.ts","webpack:///./app/components/Footer/index.tsx","webpack:///./app/components/TodoTextInput/index.tsx","webpack:///./app/components/Header/index.tsx","webpack:///./app/components/TodoItem/index.tsx","webpack:///./app/components/TodoList/index.tsx","webpack:///./app/containers/App/index.tsx","webpack:///./app/reducers/todos.ts","webpack:///./app/reducers/index.ts","webpack:///./app/middleware/logger.ts","webpack:///./app/store/index.ts","webpack:///./main.tsx","webpack:///./app/actions/todos.ts"],"names":["module","exports","App","path","component","TodoModel","Filter","FILTER_TITLES","SHOW_ALL","SHOW_ACTIVE","SHOW_COMPLETED","Footer","filter","activeCount","completedCount","onClickFilter","onClickClearCompleted","renderTodoCount","useCallback","itemWord","className","count","renderFilterLink","selectedFilter","selected","style","cursor","onClick","children","renderClearButton","clearCompleted","normal","filters","Object","keys","map","key","TodoTextInput","placeholder","newTodo","onSave","inputText","setInputText","handleSubmit","event","text","currentTarget","value","trim","which","handleChange","target","handleBlur","classes","edit","new","type","autoFocus","onChange","onBlur","onKeyDown","Header","addTodo","handleSave","length","TodoItem","todo","editTodo","deleteTodo","completeTodo","editing","setEditing","handleDoubleClick","id","completed","view","toggle","checked","onDoubleClick","destroy","TodoList","todos","actions","hasIncompleted","useMemo","some","main","toggleAll","completeAll","FILTER_VALUES","FILTER_FUNCTIONS","history","location","dispatch","todoActions","state","hash","replace","find","handleClearCompleted","handleFilterChange","push","filteredTodos","todoReducer","handleActions","Type","ADD_TODO","action","payload","reduce","max","Math","DELETE_TODO","EDIT_TODO","COMPLETE_TODO","COMPLETE_ALL","CLEAR_COMPLETED","rootReducer","logger","store","next","initialState","middleware","render","document","getElementById","TodoActions","useTodoActions"],"mappings":"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","file":"app.f7fb5a42f6849b182af3.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"normal\":\"_3Ivjf\",\"toggle\":\"gyYcA\",\"destroy\":\"_6oXTL\",\"edit\":\"Dlke2\",\"editing\":\"atkUq _3Ivjf\",\"view\":\"R2I1d\",\"completed\":\"_2d4Cr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"normal\":\"_11G5b\",\"filters\":\"_2Rdg5\",\"selected\":\"KA4tP\",\"count\":\"_2aiYj\",\"clearCompleted\":\"_2VhED\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"new\":\"_1LCq9\",\"edit\":\"_2TStV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"_1MAoA\",\"normal\":\"l9hMg\",\"editing\":\"_2LE8Z\",\"edit\":\"_3IEu8\",\"view\":\"cswuJ\",\"toggle\":\"_1euYG\",\"completed\":\"_1VEnC\",\"destroy\":\"_3_fjc\",\"toggleAll\":\"_1L1bM\"};","import React from 'react';\r\nimport { Route, Switch } from 'react-router';\r\nimport { App as TodoApp } from 'app/containers/App';\r\nimport { hot } from 'react-hot-loader';\r\n\r\nexport const App = hot(module)(() => (\r\n  <Switch>\r\n    <Route path=\"/\" component={TodoApp} />\r\n  </Switch>\r\n));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"normal\":\"_1XP1U\"};","/** TodoMVC model definitions **/\r\n\r\nexport interface TodoModel {\r\n  id: number;\r\n  text: string;\r\n  completed: boolean;\r\n}\r\n\r\nexport namespace TodoModel {\r\n  export enum Filter {\r\n    SHOW_ALL = 'all',\r\n    SHOW_ACTIVE = 'active',\r\n    SHOW_COMPLETED = 'completed'\r\n  }\r\n}\r\n","import React from 'react';\r\nimport style from './style.css';\r\nimport classNames from 'classnames';\r\nimport { TodoModel } from 'app/models';\r\n\r\nexport const FILTER_TITLES = {\r\n  [TodoModel.Filter.SHOW_ALL]: 'All',\r\n  [TodoModel.Filter.SHOW_ACTIVE]: 'Active',\r\n  [TodoModel.Filter.SHOW_COMPLETED]: 'Completed'\r\n};\r\n\r\nexport namespace Footer {\r\n  export interface Props {\r\n    filter: TodoModel.Filter;\r\n    activeCount?: number;\r\n    completedCount?: number;\r\n    onClickFilter: (filter: TodoModel.Filter) => any;\r\n    onClickClearCompleted: () => any;\r\n  }\r\n}\r\n\r\nexport const Footer = ({\r\n  filter,\r\n  activeCount,\r\n  completedCount,\r\n  onClickFilter,\r\n  onClickClearCompleted\r\n}: Footer.Props): JSX.Element => {\r\n  const renderTodoCount = React.useCallback((): JSX.Element => {\r\n    const itemWord = activeCount === 1 ? ' item' : 'items';\r\n    return (\r\n      <span className={style.count}>\r\n        <strong>{activeCount || 'No'}</strong> {itemWord} left\r\n      </span>\r\n    );\r\n  }, [activeCount]);\r\n\r\n  const renderFilterLink = React.useCallback(\r\n    (selectedFilter: TodoModel.Filter): JSX.Element => {\r\n      return (\r\n        <a\r\n          className={classNames({ [style.selected]: filter === selectedFilter })}\r\n          style={{ cursor: 'pointer' }}\r\n          onClick={() => onClickFilter(selectedFilter)}\r\n          children={FILTER_TITLES[selectedFilter]}\r\n        />\r\n      );\r\n    },\r\n    [filter, onClickFilter]\r\n  );\r\n\r\n  const renderClearButton = React.useCallback((): JSX.Element | void => {\r\n    if (completedCount! > 0) {\r\n      return <button className={style.clearCompleted} onClick={onClickClearCompleted} children={'Clear completed'} />;\r\n    }\r\n  }, [completedCount]);\r\n\r\n  return (\r\n    <footer className={style.normal}>\r\n      {renderTodoCount()}\r\n      <ul className={style.filters}>\r\n        {(Object.keys(TodoModel.Filter) as (keyof typeof TodoModel.Filter)[]).map((key) => (\r\n          <li key={key} children={renderFilterLink(TodoModel.Filter[key])} />\r\n        ))}\r\n      </ul>\r\n      {renderClearButton()}\r\n    </footer>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport classNames from 'classnames';\r\nimport style from './style.css';\r\n\r\n// 声明一个 TodoTextInput的 类型验证 泛型 给 TodoTextInput 方法 使用 \r\n\r\nexport namespace TodoTextInput {\r\n  export interface Props {\r\n    placeholder?: string;\r\n    newTodo?: boolean;\r\n    onSave: (text: string) => void;\r\n  }\r\n\r\n  export interface State {\r\n    text: string;\r\n  }\r\n}\r\n\r\nexport const TodoTextInput = ({ placeholder, newTodo, onSave }: TodoTextInput.Props): JSX.Element => {\r\n  const [inputText, setInputText] = useState('');\r\n\r\n  const handleSubmit = React.useCallback(\r\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n      const text = event.currentTarget.value.trim();\r\n      if (event.which === 13) {\r\n        onSave(text);\r\n        setInputText('');\r\n      }\r\n    },\r\n    [onSave, setInputText]\r\n  );\r\n\r\n  const handleChange = React.useCallback(\r\n    (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      setInputText(event.target.value);\r\n    },\r\n    [setInputText]\r\n  );\r\n\r\n  const handleBlur = React.useCallback(\r\n    (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      const text = event.currentTarget.value.trim();\r\n      if (!newTodo) {\r\n        onSave(text);\r\n      }\r\n    },\r\n    [onSave]\r\n  );\r\n\r\n  const classes = classNames(\r\n    {\r\n      [style.edit]: !newTodo,\r\n      [style.new]: newTodo\r\n    },\r\n    style.normal\r\n  );\r\n\r\n  return (\r\n    <input\r\n      className={classes}\r\n      type=\"text\"\r\n      autoFocus\r\n      placeholder={placeholder}\r\n      value={inputText}\r\n      onChange={handleChange}\r\n      onBlur={handleBlur}\r\n      onKeyDown={handleSubmit}\r\n    />\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { TodoTextInput } from '../TodoTextInput';\r\nimport { TodoActions } from 'app/actions/todos';\r\n\r\nexport namespace Header {\r\n  export interface Props {\r\n    addTodo: typeof TodoActions.addTodo;\r\n  }\r\n}\r\n\r\nexport const Header = ({ addTodo }: Header.Props): JSX.Element => {\r\n  const handleSave = React.useCallback(\r\n    (text: string) => {\r\n      if (text.length) addTodo({ text });\r\n    },\r\n    [addTodo]\r\n  );\r\n\r\n  return (\r\n    <header>\r\n      <h1>Todos</h1>\r\n      <TodoTextInput newTodo onSave={handleSave} placeholder=\"What needs to be done?\" />\r\n    </header>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport classNames from 'classnames';\r\nimport style from './style.css';\r\nimport { TodoModel } from 'app/models';\r\nimport { TodoActions } from 'app/actions';\r\nimport { TodoTextInput } from '../TodoTextInput';\r\n\r\nexport namespace TodoItem {\r\n  export interface Props {\r\n    todo: TodoModel;\r\n    editTodo: typeof TodoActions.editTodo;\r\n    deleteTodo: typeof TodoActions.deleteTodo;\r\n    completeTodo: typeof TodoActions.completeTodo;\r\n  }\r\n}\r\n\r\nexport const TodoItem = ({ todo, editTodo, deleteTodo, completeTodo }: TodoItem.Props) => {\r\n  const [editing, setEditing] = useState(false);\r\n\r\n  const handleDoubleClick = React.useCallback(() => {\r\n    setEditing(true);\r\n  }, [setEditing]);\r\n\r\n  const handleSave = React.useCallback(\r\n    (id: number, text: string) => {\r\n      if (text.length === 0) {\r\n        deleteTodo(id);\r\n      } else {\r\n        editTodo({ id, text });\r\n      }\r\n      setEditing(false);\r\n    },\r\n    [editTodo, deleteTodo, setEditing]\r\n  );\r\n\r\n  const classes = classNames({\r\n    [style.completed]: todo.completed,\r\n    [style.editing]: editing,\r\n    [style.normal]: !editing\r\n  });\r\n\r\n  return (\r\n    <li className={classes}>\r\n      {editing ? (\r\n        <TodoTextInput onSave={(text) => todo.id && handleSave(todo.id, text)} />\r\n      ) : (\r\n        <div className={style.view}>\r\n          <input\r\n            type=\"checkbox\"\r\n            className={style.toggle}\r\n            checked={todo.completed}\r\n            onChange={() => todo.id && completeTodo(todo.id)}\r\n          />\r\n          <label onDoubleClick={() => handleDoubleClick()}>{todo.text}</label>\r\n          <button\r\n            className={style.destroy}\r\n            onClick={() => {\r\n              if (todo.id) deleteTodo(todo.id);\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n    </li>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport style from './style.css';\r\nimport { TodoActions } from 'app/actions/todos';\r\nimport { TodoItem } from '../TodoItem';\r\nimport { TodoModel } from 'app/models/TodoModel';\r\n\r\nexport namespace TodoList {\r\n  export interface Props {\r\n    todos: TodoModel[];\r\n    actions: TodoActions;\r\n  }\r\n}\r\n\r\nexport const TodoList = ({ todos, actions }: TodoList.Props): JSX.Element => {\r\n  const hasIncompleted = React.useMemo(() => todos.some((todo) => !todo.completed), []);\r\n  return (\r\n    <section className={style.main}>\r\n      {hasIncompleted && (\r\n        <input className={style.toggleAll} type=\"checkbox\" checked={hasIncompleted} onChange={actions.completeAll} />\r\n      )}\r\n      <ul className={style.normal}>\r\n        {todos.map((todo) => (\r\n          <TodoItem\r\n            key={todo.id}\r\n            todo={todo}\r\n            completeTodo={actions.completeTodo}\r\n            deleteTodo={actions.deleteTodo}\r\n            editTodo={actions.editTodo}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </section>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport style from './style.css';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useTodoActions } from 'app/actions';\r\nimport { RootState } from 'app/reducers';\r\nimport { TodoModel } from 'app/models';\r\nimport { Header, TodoList, Footer } from 'app/components';\r\n\r\nconst FILTER_VALUES = (Object.keys(TodoModel.Filter) as (keyof typeof TodoModel.Filter)[]).map(\r\n    (key) => TodoModel.Filter[key]\r\n);\r\n\r\nconst FILTER_FUNCTIONS: Record<TodoModel.Filter, (todo: TodoModel) => boolean> = {\r\n    [TodoModel.Filter.SHOW_ALL]: () => true,\r\n    [TodoModel.Filter.SHOW_ACTIVE]: (todo) => !todo.completed,\r\n    [TodoModel.Filter.SHOW_COMPLETED]: (todo) => todo.completed\r\n};\r\n\r\nexport namespace App {\r\n    export interface Props extends RouteComponentProps<void> { }\r\n}\r\n\r\nexport const App = ({ history, location }: App.Props) => {\r\n    const dispatch = useDispatch();\r\n    const todoActions = useTodoActions(dispatch);\r\n    const { todos, filter } = useSelector((state: RootState) => {\r\n        const hash = location?.hash?.replace('#', '');\r\n        return {\r\n            todos: state.todos,\r\n            filter: FILTER_VALUES.find((value) => value === hash) ?? TodoModel.Filter.SHOW_ALL\r\n        };\r\n    });\r\n\r\n    const handleClearCompleted = React.useCallback((): void => {\r\n        todoActions.clearCompleted();\r\n    }, [todoActions]);\r\n\r\n    const handleFilterChange = React.useCallback(\r\n        (filter: TodoModel.Filter): void => {\r\n            history.push(`#${filter}`);\r\n        },\r\n        [history]\r\n    );\r\n\r\n    const filteredTodos = React.useMemo(() => (filter ? todos.filter(FILTER_FUNCTIONS[filter]) : todos), [todos, filter]);\r\n    const activeCount = React.useMemo(() => todos.filter((todo) => !todo.completed).length, [todos]);\r\n    const completedCount = React.useMemo(() => todos.filter((todo) => todo.completed).length, [todos]);\r\n\r\n    return (\r\n        <div className={style.normal}>\r\n            <Header addTodo={todoActions.addTodo} />\r\n            <TodoList todos={filteredTodos} actions={todoActions} />\r\n            <Footer\r\n                filter={filter}\r\n                activeCount={activeCount}\r\n                completedCount={completedCount}\r\n                onClickClearCompleted={handleClearCompleted}\r\n                onClickFilter={handleFilterChange}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","import { handleActions } from 'redux-actions';\r\nimport { RootState } from './state';\r\nimport { TodoActions } from 'app/actions/todos';\r\nimport { TodoModel } from 'app/models';\r\n\r\nconst initialState: RootState.TodoState = [\r\n  {\r\n    id: 1,\r\n    text: 'Use Redux',\r\n    completed: false\r\n  }\r\n];\r\n\r\nexport const todoReducer = handleActions<RootState.TodoState, TodoModel>(\r\n  {\r\n    [TodoActions.Type.ADD_TODO]: (state, action) => {\r\n      if (action.payload && action.payload.text) {\r\n        return [\r\n          {\r\n            id: state.reduce((max, todo) => Math.max(todo.id || 1, max), 0) + 1,\r\n            completed: false,\r\n            text: action.payload.text\r\n          },\r\n          ...state\r\n        ];\r\n      }\r\n      return state;\r\n    },\r\n    [TodoActions.Type.DELETE_TODO]: (state, action) => {\r\n      return state.filter((todo) => todo.id !== (action.payload as any));\r\n    },\r\n    [TodoActions.Type.EDIT_TODO]: (state, action) => {\r\n      return state.map((todo) => {\r\n        if (!todo || !action || !action.payload) {\r\n          return todo;\r\n        }\r\n        return (todo.id || 0) === action.payload.id ? { ...todo, text: action.payload.text } : todo;\r\n      });\r\n    },\r\n    [TodoActions.Type.COMPLETE_TODO]: (state, action) => {\r\n      return state.map((todo) =>\r\n        todo.id === (action.payload as any) ? { ...todo, completed: !todo.completed } : todo\r\n      );\r\n    },\r\n    [TodoActions.Type.COMPLETE_ALL]: (state, action) => {\r\n      return state.map((todo) => ({ ...todo, completed: true }));\r\n    },\r\n    [TodoActions.Type.CLEAR_COMPLETED]: (state, action) => {\r\n      return state.filter((todo) => todo.completed === false);\r\n    }\r\n  },\r\n  initialState\r\n);\r\n","import { combineReducers } from 'redux';\r\nimport { RootState } from './state';\r\nimport { todoReducer } from './todos';\r\n\r\nexport { RootState };\r\n\r\nexport const rootReducer = combineReducers<RootState>({\r\n  todos: todoReducer\r\n});\r\n","import { Middleware } from 'redux';\r\n\r\nexport const logger: Middleware = (store) => (next) => (action) => {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    console.log(action);\r\n  }\r\n  return next(action);\r\n};\r\n","import { Store, createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { RootState, rootReducer } from 'app/reducers';\r\nimport { logger, thunk } from 'app/middleware';\r\n\r\nexport function configureStore(initialState?: RootState): Store<RootState> {\r\n  let middleware = applyMiddleware(thunk, logger);\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    middleware = composeWithDevTools(middleware);\r\n  }\r\n\r\n  const store = createStore(rootReducer as any, initialState as any, middleware) as Store<RootState>;\r\n\r\n  if (module.hot) {\r\n    module.hot.accept('app/reducers', () => {\r\n      const nextReducer = require('app/reducers');\r\n      store.replaceReducer(nextReducer);\r\n    });\r\n  }\r\n\r\n  return store;\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createBrowserHistory } from 'history';\r\nimport { configureStore } from 'app/store';\r\nimport { Router } from 'react-router';\r\nimport { App } from './app';\r\n\r\n// prepare store\r\nconst history = createBrowserHistory();\r\nconst store = configureStore();\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Router history={history}>\r\n      <App />\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n","import { useMemo } from 'react';\r\nimport { Dispatch, bindActionCreators } from 'redux';\r\nimport { createAction } from 'redux-actions';\r\nimport { TodoModel } from 'app/models';\r\n\r\nexport namespace TodoActions {\r\n  export enum Type {\r\n    ADD_TODO = 'ADD_TODO',\r\n    EDIT_TODO = 'EDIT_TODO',\r\n    DELETE_TODO = 'DELETE_TODO',\r\n    COMPLETE_TODO = 'COMPLETE_TODO',\r\n    COMPLETE_ALL = 'COMPLETE_ALL',\r\n    CLEAR_COMPLETED = 'CLEAR_COMPLETED'\r\n  }\r\n\r\n  export const addTodo = createAction<PartialPick<TodoModel, 'text'>>(Type.ADD_TODO);\r\n  export const editTodo = createAction<PartialPick<TodoModel, 'id'>>(Type.EDIT_TODO);\r\n  export const deleteTodo = createAction<TodoModel['id']>(Type.DELETE_TODO);\r\n  export const completeTodo = createAction<TodoModel['id']>(Type.COMPLETE_TODO);\r\n  export const completeAll = createAction(Type.COMPLETE_ALL);\r\n  export const clearCompleted = createAction(Type.CLEAR_COMPLETED);\r\n}\r\n\r\nexport type TodoActions = Omit<typeof TodoActions, 'Type'>;\r\nexport const useTodoActions = (dispatch: Dispatch) => {\r\n  const { Type, ...actions } = TodoActions;\r\n  return useMemo(() => bindActionCreators(actions as any, dispatch), [dispatch]) as TodoActions;\r\n};\r\n"],"sourceRoot":""}